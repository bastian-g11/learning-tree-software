generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  full_name     String
  phone         String
  address       String
  photo_link    String
  image         String?

  creation_date DateTime @default(now())
  update_date   DateTime @updatedAt

  position      Position      @relation(fields: [position_id], references: [id])
  position_id   String
  user_type     UserType      @relation(fields: [user_type_id], references: [id])
  user_type_id  String
  course_states CourseState[]
  notes         Note[]
  comments      Comment[]
  likes         Like[]
  trainings     Training[]
  accounts      Account[]
  sessions      Session[]
}

model Position {
  id   String @id @default(cuid())
  name String @unique

  creation_date DateTime @default(now())
  update_date   DateTime @updatedAt

  users User[]
}

model UserType {
  id   String @id @default(cuid())
  name String @unique

  creation_date DateTime @default(now())
  update_date   DateTime @updatedAt

  users User[]
}

model Note {
  id   String @id @default(cuid())
  text String

  creation_date DateTime @default(now())
  update_date   DateTime @updatedAt

  user      User   @relation(fields: [user_id], references: [id])
  user_id   String
  course    Course @relation(fields: [course_id], references: [id])
  course_id String
  likes     Like[]
}

model Comment {
  id   String @id @default(cuid())
  text String

  creation_date DateTime @default(now())
  update_date   DateTime @updatedAt

  user        User     @relation(fields: [user_id], references: [id])
  user_id     String
  training    Training @relation(fields: [training_id], references: [id])
  training_id String
}

model Like {
  id String @id @default(cuid())

  creation_date DateTime @default(now())
  update_date   DateTime @updatedAt

  user    User   @relation(fields: [user_id], references: [id])
  user_id String
  note    Note   @relation(fields: [note_id], references: [id])
  note_id String
}

model Course {
  id       String @id @default(cuid())
  name     String @unique
  duration Int
  link     String

  creation_date DateTime @default(now())
  update_date   DateTime @updatedAt

  trainings     Training[]
  course_states CourseState[]
  notes         Note[]
}

model Training {
  id          String @id @default(cuid())
  name        String @unique
  description String

  creation_date DateTime @default(now())
  update_date   DateTime @updatedAt

  courses  Course[]
  users    User[]
  comments Comment[]
}

model CourseState {
  id               String  @id @default(cuid())
  is_completed     Boolean
  certificated     Boolean
  certificate_link String

  creation_date DateTime @default(now())
  update_date   DateTime @updatedAt

  user      User   @relation(fields: [user_id], references: [id])
  user_id   String
  course    Course @relation(fields: [course_id], references: [id])
  course_id String
}
